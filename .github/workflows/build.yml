name: Build and Deploy
on:
  pull_request:
    types: [assigned, opened, synchronize, reopened]
  push:
    branches: [ master ]
env:
  APP_REPOSITORY: dfedigital/get-into-teaching-web
  CONTENT_REPOSITORY: DFE-Digital/get-into-teaching-content
jobs:
  build:
    name: Build and Deploy 
    runs-on: ubuntu-latest
    if: false
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Lint Dockerfile
        uses: brpaz/hadolint-action@master
        with:
             dockerfile: "Dockerfile"
      - name: Setup sonarqube
        uses: warchant/setup-sonar-scanner@v1 

      - name: Get Short SHA
        id: sha
        run: echo ::set-output name=short::$(git rev-parse --short $GITHUB_SHA)

      - name: Build and push to Docker Hub
        if: github.ref == 'refs/heads/master'
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PERSONAL_ACCESS_TOKEN }}
          repository: ${{ env.APP_REPOSITORY }}
          always_pull: true
          add_git_labels: true
          tag_with_ref: true
          tag_with_sha: true
          push: true
          build_args: SHA=${{ steps.sha.outputs.short}}

      - name: Build Only
        if: github.ref != 'refs/heads/master'
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PERSONAL_ACCESS_TOKEN }}
          repository: ${{ env.APP_REPOSITORY }}
          always_pull: true
          add_git_labels: true
          tag_with_ref: true
          tag_with_sha: true
          build_args: SHA=${{ steps.sha.outputs.short}}

      - name: Set DOCKER_IMAGE environment variable
        run: |-
          echo ::set-env name=DOCKER_IMAGE::${{ env.APP_REPOSITORY }}:sha-$(echo "${{ github.sha }}" | cut -c -7)

      - name: Run Specs
        run: |-
          docker run -t --rm -v ${PWD}/out:/app/out -v ${PWD}/coverage:/app/coverage -e RAILS_ENV=test $DOCKER_IMAGE \
            rspec --format RspecSonarqubeFormatter --out /app/out/test-report.xml --format documentation

      - name: Fixup report file paths
        run: sudo sed -i "s?\"/app/?\"${PWD}/?" coverage/.resultset.json

      - name:  Keep Code Coverage Report
        uses: actions/upload-artifact@v2
        with:
          name: Code_Coverage
          path: ${{ github.workspace }}/coverage/*

      - name:  Keep Unit Tests Results
        uses: actions/upload-artifact@v2
        with:
          name: unit_tests
          path: ${{ github.workspace }}/out/*

      - name: Lint Ruby
        run: |-
          docker run -t --rm -e RAILS_ENV=test $DOCKER_IMAGE \
            rubocop app config db lib spec Gemfile --format clang

      - name: Run Brakeman static security scanner
        run: |-
          docker run -t --rm -e RAILS_ENV=test $DOCKER_IMAGE brakeman --no-pager

      - name: Run sonarqube
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: sonar-scanner
           -Dsonar.login=${{ secrets.SONAR_TOKEN }}
           -Dsonar.organization=dfe-digital
           -Dsonar.host.url=https://sonarcloud.io/
           -Dsonar.projectKey=DFE-Digital_get-into-teaching-app
           -Dsonar.testExecutionReportPaths=out/test-report.xml
           -Dsonar.ruby.coverage.reportPaths=${PWD}/coverage/.resultset.json

      - name: Slack Notification
        if: failure()
        uses: rtCamp/action-slack-notify@master
        env:
           SLACK_CHANNEL: getintoteaching_tech
           SLACK_COLOR: '#3278BD'
           SLACK_ICON: https://github.com/rtCamp.png?size=48
           SLACK_MESSAGE: ':disappointed_relieved: Pipeline Failure :disappointed_relieved:'
           SLACK_TITLE: 'Failure: ${{ github.workflow }}'
           SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

  trigger_content_build:
    name: Trigger build of Content repo
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    needs: build
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Get Short SHA
        id: sha
        run: echo ::set-output name=short::$(git rev-parse --short $GITHUB_SHA)

      - name: Trigger build in Content repo
        run: |-
          curl -X POST \
            -H "Authorization: token ${{ secrets.BUILD_CONTENT_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            https://api.github.com/repos/${{ env.CONTENT_REPOSITORY }}/dispatches \
            --data '{"event_type": "Build triggered from App repo", "client_payload": { "parent_sha": "'"${{ steps.sha.outputs.short}}"'"  }}'

      - name: Slack Notification
        if: failure()
        uses: rtCamp/action-slack-notify@master
        env:
           SLACK_CHANNEL: getintoteaching_tech
           SLACK_COLOR: '#3278BD'
           SLACK_ICON: https://github.com/rtCamp.png?size=48
           SLACK_MESSAGE: ':disappointed_relieved: Pipeline Failure :disappointed_relieved:'
           SLACK_TITLE: 'Failure: ${{ github.workflow }}'
           SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

  update_content_repo:
    name: Update the base image used in the Content repo
    runs-on: ubuntu-latest
    # if: github.ref == 'refs/heads/master'
    # needs: build
    steps:
      - name: Set short sha
        id: sha
        run: echo ::set-output name=short::$(echo "${{ github.sha }}" | cut -c -7)

      - name: Set docker-image variable
        id: docker-image
        run: |-
          echo ::set-output name=image::${{ env.APP_REPOSITORY }}:sha-${{ steps.sha.outputs.short }}

      - name: Print discovered docker-image variable
        run: |-
          echo "DOCKER IMAGE: '${{ steps.docker-image.outputs.image }}'"

      - name: Clone content repo
        run: git clone --depth=1 https://github.com/${{ env.CONTENT_REPOSITORY }}.git content

      - name: List content repo
        run: cd content && ls

      - name: Update Dockerfile
        run: |-
          sed -i "s~FROM .*~FROM ${{ steps.docker-image.outputs.image }}~" content/Dockerfile.experiment

      - name: Print updated Dockerfile
        run: cat content/Dockerfile.experiment

      - name: Commit changes to Dockerfile
        run: |-
          cd content
          git config user.name "GiT Workflow Bot"
          git config user.email "<>"
          git add Dockerfile.experiment
          git commit -m "Updated base image to ${{ steps.sha.outputs.short}}

          ${{ steps.docker-image.outputs.image }}"

      - name: Show last commit
        run: |-
          cd content
          git show HEAD

      # - name: Push the commit
      #   env:
      #     API_TOKEN_GITHUB: ${{ secrets.BUILD_CONTENT_TOKEN }}
      #   run: |-
      #     cd content
      #     git push origin master

      - name: Trigger build in Content repo
        run: |-
          curl -X POST \
            -H "Authorization: token ${{ secrets.BUILD_CONTENT_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            https://api.github.com/repos/${{ env.CONTENT_REPOSITORY }}/dispatches \
            --data '{"event_type": "Build triggered from App repo", "client_payload": { "parent_sha": "'"5fe203c5c4e7898d2c3e6e0c30d4361f419b720b"'"  }}'
