name: Build and Deploy
on:
  workflow_dispatch:
  pull_request:
    types: [assigned, opened, synchronize, reopened]
  push:
    branches: [ master ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      DOCKER_IMAGE: ${{ steps.docker.outputs.DOCKER_IMAGE }}

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2.4.0

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - uses: Azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: DFE-Digital/github-actions/keyvault-yaml-secret@master
        id: ACTIONS-API-ACCESS-TOKEN
        with:
          keyvault: ${{ secrets.KEY_VAULT}}
          yaml_secret: INFRA-KEYS
          secret: ACTIONS-API-ACCESS-TOKEN

      - uses: DFE-Digital/github-actions/keyvault-yaml-secret@master
        id: SLACK-WEBHOOK
        with:
          keyvault: ${{ secrets.KEY_VAULT}}
          yaml_secret: INFRA-KEYS
          secrets: 'SLACK-WEBHOOK'

      - name: Lint Dockerfile
        uses: brpaz/hadolint-action@master
        with:
             dockerfile: "Dockerfile"

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Get Short SHA
        id: sha
        run: |
             echo ::set-output name=short::$(echo $GITHUB_SHA | cut -c -7)

      - name: Set DOCKER_IMAGE environment variable
        id:   docker
        run: |
             if [ "${{github.ref}}" == "refs/heads/master" ]
             then
                echo ::set-output name=DOCKER_IMAGE::${{ env.DOCKER_REPOSITORY }}:sha-${{ steps.sha.outputs.short }}
                echo ::set-output name=DOCKER_EVENT::${{ env.DOCKER_REPOSITORY }}:master
             else
                echo ::set-output name=DOCKER_IMAGE::${{ env.DOCKER_REPOSITORY }}:review-${{steps.sha.outputs.short }}
                echo ::set-output name=DOCKER_EVENT::${{ env.DOCKER_REPOSITORY }}:PR-${{ github.event.number }}
             fi


      - name: Cache Docker layers
        uses: actions/cache@v2.1.7
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
             ${{ runner.os }}-buildx-

      - name: Login to Docker Hub
        uses: docker/login-action@v1.12.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ steps.ACTIONS-API-ACCESS-TOKEN.outputs.secret-value }}

      - name: Build and push to Docker Hub
        uses: docker/build-push-action@v2.7.0
        with:
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          tags: |
                 ${{ steps.docker.outputs.DOCKER_IMAGE }}
                 ${{ steps.docker.outputs.DOCKER_EVENT }}
          push: true
          build-args: |
                      SHA=${{ steps.sha.outputs.short }}

      - name: Slack Notification
        if: failure() && github.ref == 'refs/heads/master'
        uses: rtCamp/action-slack-notify@master
        env:
           SLACK_COLOR: ${{env.SLACK_ERROR}}
           SLACK_MESSAGE: 'There has been a failure building the application'
           SLACK_TITLE: 'Failure Building Application'
           SLACK_WEBHOOK: ${{ steps.SLACK-WEBHOOK.outputs.secret-value }}


  master_tests:
    name: Unit Tests (Master Branch)
    runs-on: ubuntu-latest
    needs: [ build ]
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2.4.0

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - uses: Azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: DFE-Digital/github-actions/keyvault-yaml-secret@master
        id: ACTIONS-API-ACCESS-TOKEN
        with:
          keyvault: ${{ secrets.KEY_VAULT}}
          yaml_secret: INFRA-KEYS
          secret: ACTIONS-API-ACCESS-TOKEN

      - uses: DFE-Digital/github-actions/keyvault-yaml-secret@master
        id: SLACK-WEBHOOK
        with:
          keyvault: ${{ secrets.KEY_VAULT}}
          yaml_secret: INFRA-KEYS
          secret: SLACK-WEBHOOK

      - name: Check Content pages
        run: |-
          docker run -t --rm -e RAILS_ENV=test \
            ${{ needs.build.outputs.DOCKER_IMAGE }} \
            rspec --format progress spec/features/content_pages_spec.rb

      - name: Slack Notification
        if: failure()
        uses: rtCamp/action-slack-notify@master
        env:
           SLACK_COLOR: ${{env.SLACK_ERROR}}
           SLACK_MESSAGE: 'There has been a failure unit testing the application'
           SLACK_TITLE: 'Failure Unit Testing Application'
           SLACK_WEBHOOK: ${{ steps.SLACK-WEBHOOK.outputs.secret-value }}

  javascript_tests:
    name: Javascript Tests
    runs-on: ubuntu-latest
    needs: [ build ]
    if: github.ref != 'refs/heads/master'
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2.4.0

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - name: ESLint - JavaScript linting
        run: |-
          docker run -t --rm -e RAILS_ENV=test -e NODE_ENV=test -e CI=true \
            ${{needs.build.outputs.DOCKER_IMAGE}} "yarn && yarn js-lint"

      - name: Run Javascript Tests
        run: |-
          docker run -t --rm -e RAILS_ENV=test -e NODE_ENV=test -e CI=true \
            ${{needs.build.outputs.DOCKER_IMAGE}} "yarn && yarn spec"

  feature_tests:
    name: Unit Tests (Feature Branch)
    runs-on: ubuntu-latest
    needs: [ build ]
    if: github.ref != 'refs/heads/master'
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2.4.0

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - uses: Azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: DFE-Digital/github-actions/keyvault-yaml-secret@master
        id: SONAR-TOKEN
        with:
          keyvault: ${{ secrets.KEY_VAULT}}
          yaml_secret: INFRA-KEYS
          secret: SONAR-TOKEN

      - uses: DFE-Digital/github-actions/keyvault-yaml-secret@master
        id: SLACK-WEBHOOK
        with:
          keyvault: ${{ secrets.KEY_VAULT}}
          yaml_secret: INFRA-KEYS
          secret: SLACK-WEBHOOK

      - name: Lint Ruby
        run: |-
          docker run -t --rm -v ${PWD}/out:/app/out -e RAILS_ENV=test ${{needs.build.outputs.DOCKER_IMAGE}} \
            rubocop --format json --out=/app/out/rubocop-result.json

      - name: Keep Rubocop output
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: Rubocop_results
          path: ${{ github.workspace }}/out/rubocop-result.json

      - name: Lint ERB Templates
        run: |-
          docker run -t --rm ${{needs.build.outputs.DOCKER_IMAGE}} "bundle exec erblint --lint-all"

      - name: Lint Markdown
        run: |-
          docker run -t --rm -v ${PWD}/out:/app/out ${{needs.build.outputs.DOCKER_IMAGE}} "bundle exec mdl app/views/**/*.md | tee /app/out/mdl-result.txt"

      - name: Keep Lint Markdown output
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: Rubocop_results
          path: ${{ github.workspace }}/out/mdl-result.txt

      - name: Run Specs
        run: |-
          docker run -t --rm -v ${PWD}/out:/app/out -v ${PWD}/coverage:/app/coverage -e RAILS_ENV=test ${{needs.build.outputs.DOCKER_IMAGE}} \
            bundle exec parallel_split_test spec --format RspecSonarqubeFormatter --out /app/out/test-report.xml --format progress

      - name: Fixup report file paths
        run: sudo sed -i "s?\"/app/?\"${PWD}/?" coverage/coverage.json

      - name:  Keep Code Coverage Report
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: Code_Coverage
          path: ${{ github.workspace }}/coverage/*

      - name:  Keep Unit Tests Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: unit_tests
          path: ${{ github.workspace }}/out/*

      - name: Setup sonarqube
        uses: warchant/setup-sonar-scanner@v3

      - name: Run sonarqube
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: sonar-scanner
           -Dsonar.login=${{ steps.SONAR-TOKEN.outputs.secret-value }}
           -Dsonar.organization=dfe-digital
           -Dsonar.host.url=https://sonarcloud.io/
           -Dsonar.projectKey=DFE-Digital_get-into-teaching-app
           -Dsonar.testExecutionReportPaths=out/test-report.xml
           -Dsonar.ruby.coverage.reportPaths=${PWD}/coverage/coverage.json
           -Dsonar.ruby.rubocop.reportPaths=${PWD}/out/rubocop-result.json


  review:
    name: Review Deployment Process
    needs: [  build  ]
    if: github.ref != 'refs/heads/master'
    runs-on: ubuntu-latest
    concurrency: Review_${{github.event.inputs.pr}}
    environment:
       name: Review 
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2.4.0

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - uses: Azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: DFE-Digital/github-actions/keyvault-yaml-secret@master
        id: ACTIONS-API-ACCESS-TOKEN
        with:
          keyvault: ${{ secrets.KEY_VAULT}}
          yaml_secret: INFRA-KEYS
          secret: ACTIONS-API-ACCESS-TOKEN

      - uses: DFE-Digital/github-actions/keyvault-yaml-secret@master
        id: SLACK-WEBHOOK
        with:
          keyvault: ${{ secrets.KEY_VAULT}}
          yaml_secret: INFRA-KEYS
          secret: SLACK-WEBHOOK

      - name: Deploy to Review
        uses: ./.github/workflows/actions/deploy
        id: deploy
        with:
          environment: Review
          sha:  ${{ github.sha }}
          pr:   ${{github.event.number}}
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          KEY_VAULT:         ${{ secrets.KEY_VAULT }}
          ARM_ACCESS_KEY:    ${{ secrets.ARM_ACCESS_KEY }}

      - name: Post sticky pull request comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          message:  Review app deployed to https://${{env.REVIEW_APPLICATION}}-${{github.event.number}}.${{env.DOMAIN}}

      - name: Add Review Label
        if: contains(github.event.pull_request.user.login, 'dependabot') == false
        uses: actions-ecosystem/action-add-labels@v1.1.3
        with:
          github_token: ${{ steps.ACTIONS-API-ACCESS-TOKEN.outputs.secret-value }}
          labels: Review

  development:
    name: Development Deployment
    needs: [  master_tests  ]
    if: github.ref == 'refs/heads/master'
    concurrency: Development   
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{steps.tag_version.outputs.pr_number}}
      release_sha: ${{github.sha }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2.4.0

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - uses: Azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: DFE-Digital/github-actions/keyvault-yaml-secret@master
        id: ACTIONS-API-ACCESS-TOKEN
        with:
          keyvault: ${{ secrets.KEY_VAULT}}
          yaml_secret: INFRA-KEYS
          secret: ACTIONS-API-ACCESS-TOKEN

      - uses: DFE-Digital/github-actions/keyvault-yaml-secret@master
        id: SLACK-WEBHOOK
        with:
          keyvault: ${{ secrets.KEY_VAULT}}
          yaml_secret: INFRA-KEYS
          secret: SLACK-WEBHOOK

      - name: Deploy to Development
        uses: ./.github/workflows/actions/deploy
        id: deploy
        with:
          environment: Development
          sha:  ${{ github.sha }}
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          KEY_VAULT:         ${{ secrets.KEY_VAULT }}
          ARM_ACCESS_KEY:    ${{ secrets.ARM_ACCESS_KEY }}
          
      - name: Trigger Development Fix Network Policies
        uses: benc-uk/workflow-dispatch@v1.1
        with:
          repo: DFE-Digital/get-into-teaching-api
          workflow: Fix Network policies
          token: ${{ steps.ACTIONS-API-ACCESS-TOKEN.outputs.secret-value }}
          inputs: '{"environment": "Development" }'

      - name: Generate Tag from PR Number
        id: tag_version
        uses: DFE-Digital/github-actions/GenerateReleaseFromSHA@master
        with:
          sha: ${{github.sha}}

      - name: Create a GitHub Release
        id: release
        if: steps.tag_version.outputs.pr_found == 1
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_version.outputs.pr_number }}
          body: ${{ steps.tag_version.outputs.pr_number }}
          release_name: Release ${{ steps.tag_version.outputs.pr_number }}
          commitish: ${{ github.sha}}
          prerelease: false

      - name: Copy PR Info to Release
        if: steps.release.outputs.id
        uses: DFE-Digital/github-actions/CopyPRtoRelease@master
        with:
          PR_NUMBER:  ${{ steps.tag_version.outputs.pr_number }}
          RELEASE_ID: ${{ steps.release.outputs.id }}
          TOKEN: ${{secrets.GITHUB_TOKEN}}

  owasp:
    name: OWASP Checks 
    needs: [ development ]
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2.4.0

      - name: Vunerability Test 
        uses: ./.github/workflows/actions/owasp
        id: deploy
        with:
          environment: Development
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          KEY_VAULT:         ${{ secrets.KEY_VAULT }}
          ARM_ACCESS_KEY:    ${{ secrets.ARM_ACCESS_KEY }}
          GITHUB_TOKEN:      ${{secrets.GITHUB_TOKEN}}

  qa:
    name: Quality Assurance Deployment
    needs: [ development ]
    if: github.ref == 'refs/heads/master'
    concurrency: QA     
    runs-on: ubuntu-latest
    environment:
       name: Test 
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2.4.0

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - uses: Azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: DFE-Digital/github-actions/keyvault-yaml-secret@master
        id: ACTIONS-API-ACCESS-TOKEN
        with:
          keyvault: ${{ secrets.KEY_VAULT}}
          yaml_secret: INFRA-KEYS
          secret: ACTIONS-API-ACCESS-TOKEN

      - uses: DFE-Digital/github-actions/keyvault-yaml-secret@master
        id: SLACK-WEBHOOK
        with:
          keyvault: ${{ secrets.KEY_VAULT}}
          yaml_secret: INFRA-KEYS
          secret: SLACK-WEBHOOK

      - name: Deploy to Test
        uses: ./.github/workflows/actions/deploy
        id: deploy
        with:
          environment: Test
          sha:  ${{ github.sha }}
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          KEY_VAULT:         ${{ secrets.KEY_VAULT }}
          ARM_ACCESS_KEY:    ${{ secrets.ARM_ACCESS_KEY }}

      - name: Trigger Test Fix Network Policies
        uses: benc-uk/workflow-dispatch@v1.1
        with:
         repo: DFE-Digital/get-into-teaching-api
         workflow: Fix Network policies
         token: ${{ steps.ACTIONS-API-ACCESS-TOKEN.outputs.secret-value }}
         inputs: '{"environment": "Test" }'

      - name: Slack Notification
        if: failure()
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_COLOR: ${{env.SLACK_ERROR}}
          SLACK_TITLE: Failure in Post-Development Deploy
          SLACK_MESSAGE: Failure with initialising QA deployment for ${{env.APPLICATION}}
          SLACK_WEBHOOK: ${{ steps.SLACK-WEBHOOK.outputs.secret-value }}

  cypress:
    name: Run Cypress Tests on QA
    runs-on: ubuntu-latest
    concurrency: Cypress     
    needs: [ qa ]
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2.4.0

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - uses: Azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: DFE-Digital/github-actions/keyvault-yaml-secret@master
        id: ACTIONS-API-ACCESS-TOKEN
        with:
          keyvault: ${{ secrets.KEY_VAULT}}
          yaml_secret: INFRA-KEYS
          secret: ACTIONS-API-ACCESS-TOKEN

      - name: Trigger Cypress Tests (DFE-Digital/get-into-teaching-frontend-tests )
        uses: benc-uk/workflow-dispatch@v1.1
        with:
          repo: DFE-Digital/get-into-teaching-frontend-tests
          workflow: Cypress
          token: ${{ steps.ACTIONS-API-ACCESS-TOKEN.outputs.secret-value }}
          inputs: '{"application": "APP" , "reference": "${{ github.sha }}" }'
          ref: refs/heads/master

      - name: Wait for Cypress Tests
        uses: fountainhead/action-wait-for-check@v1.0.0
        id: wait-for-tests
        with:
          token: ${{ steps.ACTIONS-API-ACCESS-TOKEN.outputs.secret-value }}
          checkName: ${{ github.sha }}
          ref: refs/heads/master
          repo: get-into-teaching-frontend-tests
          intervalSeconds: 30
          timeoutSeconds: 600

      - name: Check for test failure
        if: steps.wait-for-tests.outputs.conclusion == 'failure'
        run: exit 1

  production:
    name: Production Deployment
    runs-on: ubuntu-latest
    needs: [ cypress, development ]
    concurrency: Production     
    environment:
       name: Production 
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2.4.0

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - uses: Azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: DFE-Digital/github-actions/keyvault-yaml-secret@master
        id: ACTIONS-API-ACCESS-TOKEN
        with:
          keyvault: ${{ secrets.KEY_VAULT}}
          yaml_secret: INFRA-KEYS
          secret: ACTIONS-API-ACCESS-TOKEN

      - uses: DFE-Digital/github-actions/keyvault-yaml-secret@master
        id: SLACK-WEBHOOK
        with:
          keyvault: ${{ secrets.KEY_VAULT}}
          yaml_secret: INFRA-KEYS
          secret: SLACK-WEBHOOK

      - uses: DFE-Digital/github-actions/keyvault-yaml-secret@master
        id: SLACK-RELEASE-NOTE-WEBHOOK
        with:
          keyvault: ${{ secrets.KEY_VAULT}}
          yaml_secret: INFRA-KEYS
          secret: SLACK-RELEASE-NOTE-WEBHOOK

      - name: Get Release Id from Tag
        id: tag_id
        uses: DFE-Digital/github-actions/DraftReleaseByTag@master
        with:
          TAG: ${{needs.development.outputs.release_tag}}
          TOKEN: ${{ steps.ACTIONS-API-ACCESS-TOKEN.outputs.secret-value }}

      - name: Publish Release
        if: steps.tag_id.outputs.release_id
        uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{steps.tag_id.outputs.release_id}}

      - name: Deploy to Production
        uses: ./.github/workflows/actions/deploy
        id: deploy
        with:
          environment: Production
          sha:  ${{ github.sha }}
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          KEY_VAULT:         ${{ secrets.KEY_VAULT }}
          ARM_ACCESS_KEY:    ${{ secrets.ARM_ACCESS_KEY }}

      - name: Trigger Production Fix Network Policies
        uses: benc-uk/workflow-dispatch@v1.1
        with:
         repo: DFE-Digital/get-into-teaching-api
         workflow: Fix Network policies
         token: ${{ steps.ACTIONS-API-ACCESS-TOKEN.outputs.secret-value }}
         inputs: '{"environment": "Production" }'

      - name: Slack Release Notification
        if: steps.tag_id.outputs.release_id
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_COLOR: ${{env.SLACK_SUCCESS}}
          SLACK_TITLE: "Release Published: ${{steps.tag_id.outputs.release_name}}"
          SLACK_MESSAGE: ${{ fromJson( steps.tag_id.outputs.release_body) }}
          SLACK_WEBHOOK: ${{ steps.SLACK-RELEASE-NOTE-WEBHOOK.outputs.secret-value }}
          MSG_MINIMAL: true

      - name: Slack Notification
        if: failure()
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_COLOR: ${{env.SLACK_FAILURE}}
          SLACK_TITLE: Production Release ${{github.event.title}}
          SLACK_MESSAGE: Failure deploying Production release
          SLACK_WEBHOOK: ${{ steps.SLACK-WEBHOOK.outputs.secret-value }}

