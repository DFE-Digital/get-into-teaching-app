name: Build and Deploy

on:
  workflow_dispatch:
  pull_request:
    types: [assigned, opened, synchronize, reopened]
  push:
    branches: [ master ]

permissions:
  contents: write
  deployments: write
  issues: write
  packages: write
  pull-requests: write

jobs:
  build_release:
    name: Build (Release)
    runs-on: ubuntu-latest
    outputs:
      DOCKER_IMAGE: ${{ steps.docker.outputs.DOCKER_IMAGE }}

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - uses: Azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: DfE-Digital/keyvault-yaml-secret@v1
        id:  keyvault-yaml-secret
        with:
          keyvault: ${{ secrets.KEY_VAULT}}
          secret: INFRA-KEYS
          key: SLACK-WEBHOOK

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Get Short SHA
        id: sha
        run: |
             echo ::set-output name=short::$(echo $GITHUB_SHA | cut -c -7)

      - name: Set DOCKER_IMAGE environment variable
        id:   docker
        run: |
             if [ "${{github.ref}}" == "refs/heads/master" ]
             then
                GIT_BRANCH=master
             else
                GIT_REF=${{ github.head_ref }}
                GIT_BRANCH=${GIT_REF##*/}
             fi

             echo "BRANCH_TAG=$GIT_BRANCH" >> $GITHUB_ENV
             echo ::set-output name=DOCKER_IMAGE::${{ env.DOCKER_REPOSITORY }}:sha-${{steps.sha.outputs.short }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2.0.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push base
        uses: docker/build-push-action@v3.1.1
        with:
          context: .
          cache-from: |
            type=registry,ref=${{ env.DOCKER_REPOSITORY }}:base-${{ env.BRANCH_TAG }}
            type=registry,ref=${{ env.DOCKER_REPOSITORY}}:base-master
          tags: ${{ env.DOCKER_REPOSITORY }}:base-${{ env.BRANCH_TAG }}
          push: true
          target: base
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            SHA=${{ steps.sha.outputs.short }}
            BUILD_TYPE=release

      - name: Build and push release image
        uses: docker/build-push-action@v3.1.1
        with:
          context: .
          cache-from: |
            type=registry,ref=${{ env.DOCKER_REPOSITORY }}:${{ env.BRANCH_TAG }}
            type=registry,ref=${{ env.DOCKER_REPOSITORY }}:master
            type=registry,ref=${{ env.DOCKER_REPOSITORY }}:base-${{ env.BRANCH_TAG }}
            type=registry,ref=${{ env.DOCKER_REPOSITORY }}:base-master
          tags: |
            ${{ steps.docker.outputs.DOCKER_IMAGE }}
            ${{ env.DOCKER_REPOSITORY }}:${{ env.BRANCH_TAG }}
          push: true
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            SHA=${{ steps.sha.outputs.short }}
            BUILD_TYPE=release

      - name: Slack Notification
        if: failure() && github.ref == 'refs/heads/master'
        uses: rtCamp/action-slack-notify@master
        env:
           SLACK_COLOR: ${{env.SLACK_ERROR}}
           SLACK_MESSAGE: 'There has been a failure building the application'
           SLACK_TITLE: 'Failure Building Application'
           SLACK_WEBHOOK: ${{ steps.keyvault-yaml-secret.outputs.SLACK-WEBHOOK }}

  build_test:
    name: Build (Test)
    runs-on: ubuntu-latest
    outputs:
      DOCKER_IMAGE_TEST: ${{ steps.docker.outputs.DOCKER_IMAGE_TEST }}

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - uses: Azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: DfE-Digital/keyvault-yaml-secret@v1
        id:  keyvault-yaml-secret
        with:
          keyvault: ${{ secrets.KEY_VAULT}}
          secret: INFRA-KEYS
          key: SLACK-WEBHOOK

      - name: Lint Dockerfile
        uses: brpaz/hadolint-action@master
        with:
             dockerfile: "Dockerfile"

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Get Short SHA
        id: sha
        run: |
             echo ::set-output name=short::$(echo $GITHUB_SHA | cut -c -7)

      - name: Set DOCKER_IMAGE_TEST environment variable
        id:   docker
        run: |
             if [ "${{github.ref}}" == "refs/heads/master" ]
             then
                GIT_BRANCH=master
             else
                GIT_REF=${{ github.head_ref }}
                GIT_BRANCH=${GIT_REF##*/}
             fi

             echo "BRANCH_TAG=$GIT_BRANCH" >> $GITHUB_ENV
             echo ::set-output name=DOCKER_IMAGE_TEST::${{ env.DOCKER_REPOSITORY }}:test-sha-${{ steps.sha.outputs.short }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2.0.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push test image
        uses: docker/build-push-action@v3.1.1
        with:
          push: true
          context: .
          cache-from: |
            type=registry,ref=${{ env.DOCKER_REPOSITORY }}:test-${{ env.BRANCH_TAG }}
            type=registry,ref=${{ env.DOCKER_REPOSITORY }}:test-master
            type=registry,ref=${{ env.DOCKER_REPOSITORY }}:base-${{ env.BRANCH_TAG }}
            type=registry,ref=${{ env.DOCKER_REPOSITORY }}:base-master
          tags: |
            ${{ steps.docker.outputs.DOCKER_IMAGE_TEST }}
            ${{ env.DOCKER_REPOSITORY }}:test-${{ env.BRANCH_TAG }}
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            SHA=${{ steps.sha.outputs.short }}
            BUILD_TYPE=test

      - name: Slack Notification
        if: failure() && github.ref == 'refs/heads/master'
        uses: rtCamp/action-slack-notify@master
        env:
           SLACK_COLOR: ${{env.SLACK_ERROR}}
           SLACK_MESSAGE: 'There has been a failure building the application'
           SLACK_TITLE: 'Failure Building Application'
           SLACK_WEBHOOK: ${{ steps.keyvault-yaml-secret.outputs.SLACK-WEBHOOK }}

  ruby_linting:
    name: Ruby Linting
    runs-on: ubuntu-latest
    needs: [ build_test ]
    if: github.ref != 'refs/heads/master'
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - name: Lint Ruby
        run: |-
          docker run -t --rm -v ${PWD}/out:/app/out -e RAILS_ENV=test ${{needs.build_test.outputs.DOCKER_IMAGE_TEST}} \
            rubocop --format json --out=/app/out/rubocop-result.json

      - name: Keep Rubocop output
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: rubocop_results
          path: ${{ github.workspace }}/out/rubocop-result.json

      - name: Lint ERB Templates
        run: |-
          docker run -t --rm ${{needs.build_test.outputs.DOCKER_IMAGE_TEST}} "bundle exec erblint --lint-all"

      - name: Lint Markdown
        run: |-
          docker run -t --rm -v ${PWD}/out:/app/out ${{needs.build_test.outputs.DOCKER_IMAGE_TEST}} "bundle exec mdl app/views/**/*.md | tee /app/out/mdl-result.txt"

  javascript_tests:
    name: Javascript Tests
    runs-on: ubuntu-latest
    needs: [ build_test ]
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - name: ESLint - JavaScript linting
        run: |-
          docker run -t --rm -e RAILS_ENV=test -e NODE_ENV=test -e CI=true \
            ${{needs.build_test.outputs.DOCKER_IMAGE_TEST}} "yarn && yarn js-lint"

      - name: Run Javascript Tests
        run: |-
          docker run -t --rm -e RAILS_ENV=test -e NODE_ENV=test -e CI=true \
            ${{needs.build_test.outputs.DOCKER_IMAGE_TEST}} "yarn && yarn spec"

  feature_tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [ build_test ]
    strategy:
      fail-fast: false
      matrix:
        ci_node_total: [6]
        ci_node_index: [0, 1, 2, 3, 4, 5]
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - uses: Azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: DfE-Digital/keyvault-yaml-secret@v1
        id:  keyvault-yaml-secret
        with:
          keyvault: ${{ secrets.KEY_VAULT}}
          secret: INFRA-KEYS
          key: SLACK-WEBHOOK, KNAPSACK-PRO-TEST-SUITE-TOKEN-RSPEC

      - name: Run Specs
        run: |-
          docker run -t --rm -v ${PWD}/out:/app/out -v ${PWD}/coverage/coverage-${{ matrix.ci_node_index }}:/app/coverage -e TEST_REPORT_FILE -e TEST_REPORT_FINAL_FILE -e KNAPSACK_PRO_FIXED_QUEUE_SPLIT \
            -e KNAPSACK_PRO_TEST_SUITE_TOKEN_RSPEC -e KNAPSACK_PRO_COMMIT_HASH -e KNAPSACK_PRO_BRANCH -e KNAPSACK_PRO_CI_NODE_TOTAL -e KNAPSACK_PRO_CI_NODE_INDEX -e \
            KNAPSACK_PRO_LOG_LEVEL -e RAILS_ENV=test ${{needs.build_test.outputs.DOCKER_IMAGE_TEST}} \
            "bundle exec rake 'knapsack_pro:queue:rspec[--format RspecSonarqubeFormatter --out /app/out/test-report.xml --format progress]' spec"
        env:
          KNAPSACK_PRO_TEST_SUITE_TOKEN_RSPEC: ${{ steps.keyvault-yaml-secret.outputs.KNAPSACK-PRO-TEST-SUITE-TOKEN-RSPEC }}
          KNAPSACK_PRO_CI_NODE_TOTAL: ${{ matrix.ci_node_total }}
          KNAPSACK_PRO_CI_NODE_INDEX: ${{ matrix.ci_node_index }}
          KNAPSACK_PRO_COMMIT_HASH: ${{ github.sha }}
          KNAPSACK_PRO_BRANCH: ${{ github.ref }}
          KNAPSACK_PRO_LOG_LEVEL: info
          KNAPSACK_PRO_FIXED_QUEUE_SPLIT: true
          TEST_REPORT_FILE: /app/out/test-report.xml
          TEST_REPORT_FINAL_FILE: /app/out/test-report-final.xml

      - name:  Keep Code Coverage Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: code_coverage
          path: ${{ github.workspace }}/coverage

      - name:  Keep Unit Tests Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: unit_tests
          path: ${{ github.workspace }}/out/*


  sonarscanner:
    name: Sonar Scanner
    runs-on: ubuntu-latest
    needs: [ build_test, feature_tests ]
    if: github.ref != 'refs/heads/master'
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - uses: Azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: DfE-Digital/keyvault-yaml-secret@v1
        id:  keyvault-yaml-secret
        with:
          keyvault: ${{ secrets.KEY_VAULT}}
          secret: INFRA-KEYS
          key: SONAR-TOKEN

      - name: Setup sonarqube
        uses: warchant/setup-sonar-scanner@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v3

      - name: Combine Coverage Reports
        run: |-
          docker run -t --rm -v ${{github.workspace}}/code_coverage:/app/coverage -e RAILS_ENV=test -e COVERAGE_DIR \
            ${{needs.build_test.outputs.DOCKER_IMAGE_TEST}} "bundle exec rake coverage:collate"
        env:
          COVERAGE_DIR: /app/coverage

      - name: Fix report file paths
        run: |
          sudo sed -i "s?\"/app/?\"${PWD}/?" ${{github.workspace}}/code_coverage/coverage.json

      - name: Run sonarqube
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: sonar-scanner
           -Dsonar.login=${{ steps.keyvault-yaml-secret.outputs.SONAR-TOKEN }}
           -Dsonar.organization=dfe-digital
           -Dsonar.host.url=https://sonarcloud.io/
           -Dsonar.projectKey=DFE-Digital_get-into-teaching-app
           -Dsonar.testExecutionReportPaths=${{github.workspace}}/unit_tests/test-report-final.xml
           -Dsonar.ruby.coverage.reportPaths=${{github.workspace}}/code_coverage/coverage.json
           -Dsonar.ruby.rubocop.reportPaths=${{github.workspace}}/rubocop_results/rubocop-result.json

  review:
    name: Review Deployment Process
    needs: [ build_release ]
    if: github.ref != 'refs/heads/master'
    runs-on: ubuntu-latest
    concurrency: Review_${{github.event.number}}
    environment:
       name: Review
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - uses: Azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: DfE-Digital/keyvault-yaml-secret@v1
        id:  keyvault-yaml-secret
        with:
          keyvault: ${{ secrets.KEY_VAULT}}
          secret: INFRA-KEYS
          key: SLACK-WEBHOOK

      - name: Deploy to Review
        uses: ./.github/workflows/actions/deploy
        id: deploy
        with:
          environment: Review
          sha:  ${{ github.sha }}
          pr:   ${{github.event.number}}
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          KEY_VAULT:         ${{ secrets.KEY_VAULT }}
          ARM_ACCESS_KEY:    ${{ secrets.ARM_ACCESS_KEY }}

      - name: Post sticky pull request comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          message:  Review app deployed to https://${{env.REVIEW_APPLICATION}}-${{github.event.number}}.${{env.DOMAIN}}

      - name: Add Review Label
        if: contains(github.event.pull_request.user.login, 'dependabot') == false
        uses: actions-ecosystem/action-add-labels@v1.1.3
        with:
          labels: Review

  development:
    name: Development Deployment
    needs: [  feature_tests, javascript_tests  ]
    if: github.ref == 'refs/heads/master'
    concurrency: Development
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{steps.tag_version.outputs.pr_number}}
      release_sha: ${{github.sha }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - uses: Azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: DfE-Digital/keyvault-yaml-secret@v1
        id:  keyvault-yaml-secret
        with:
          keyvault: ${{ secrets.KEY_VAULT}}
          secret: INFRA-KEYS
          key: SLACK-WEBHOOK

      - name: Deploy to Development
        uses: ./.github/workflows/actions/deploy
        id: deploy
        with:
          environment: Development
          sha:  ${{ github.sha }}
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          KEY_VAULT:         ${{ secrets.KEY_VAULT }}
          ARM_ACCESS_KEY:    ${{ secrets.ARM_ACCESS_KEY }}

      - name: Generate Tag from PR Number
        id: tag_version
        uses: DFE-Digital/github-actions/GenerateReleaseFromSHA@master
        with:
          sha: ${{github.sha}}

      - name: Create a GitHub Release
        id: release
        if: steps.tag_version.outputs.pr_found == 1
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_version.outputs.pr_number }}
          body: ${{ steps.tag_version.outputs.pr_number }}
          release_name: Release ${{ steps.tag_version.outputs.pr_number }}
          commitish: ${{ github.sha}}
          prerelease: false

      - name: Copy PR Info to Release
        if: steps.release.outputs.id
        uses: DFE-Digital/github-actions/CopyPRtoRelease@master
        with:
          PR_NUMBER:  ${{ steps.tag_version.outputs.pr_number }}
          RELEASE_ID: ${{ steps.release.outputs.id }}
          TOKEN: ${{secrets.GITHUB_TOKEN}}

  owasp:
    name: OWASP Checks
    needs: [ development ]
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Vunerability Test
        uses: ./.github/workflows/actions/owasp
        id: deploy
        with:
          environment: Development
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          KEY_VAULT:         ${{ secrets.KEY_VAULT }}
          ARM_ACCESS_KEY:    ${{ secrets.ARM_ACCESS_KEY }}
          GITHUB_TOKEN:      ${{secrets.GITHUB_TOKEN}}

  qa:
    name: Quality Assurance Deployment
    needs: [  feature_tests, javascript_tests  ]
    if: github.ref == 'refs/heads/master'
    concurrency: QA
    runs-on: ubuntu-latest
    environment:
       name: Test
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - uses: Azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: DfE-Digital/keyvault-yaml-secret@v1
        id:  keyvault-yaml-secret
        with:
          keyvault: ${{ secrets.KEY_VAULT}}
          secret: INFRA-KEYS
          key: SLACK-WEBHOOK

      - name: Deploy to Test
        uses: ./.github/workflows/actions/deploy
        id: deploy
        with:
          environment: Test
          sha:  ${{ github.sha }}
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          KEY_VAULT:         ${{ secrets.KEY_VAULT }}
          ARM_ACCESS_KEY:    ${{ secrets.ARM_ACCESS_KEY }}

      - name: Slack Notification
        if: failure()
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_COLOR: ${{env.SLACK_ERROR}}
          SLACK_TITLE: Failure in Post-Development Deploy
          SLACK_MESSAGE: Failure with initialising QA deployment for ${{env.APPLICATION}}
          SLACK_WEBHOOK: ${{ steps.keyvault-yaml-secret.outputs.SLACK-WEBHOOK }}

  integration:
    name: Run Integration Tests on QA
    runs-on: ubuntu-latest
    needs: [ build_test, qa ]
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - uses: Azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: DfE-Digital/keyvault-yaml-secret@v1
        id:  keyvault-yaml-secret
        with:
          keyvault: ${{ secrets.KEY_VAULT}}
          secret: INFRA-KEYS
          key: HTTP-USERNAME, HTTP-PASSWORD, MAILSAC-API-KEY

      - name: Run Integration Tests
        run: |-
          docker run -t --rm -e RAILS_ENV=test -e NODE_ENV=test -e CI=true -e HTTP_USERNAME -e HTTP_PASSWORD -e MAILSAC_API_KEY \
            ${{needs.build_test.outputs.DOCKER_IMAGE_TEST}} "bundle exec rspec --tag integration"
        env:
          HTTP_USERNAME: ${{ steps.keyvault-yaml-secret.outputs.HTTP-USERNAME }}
          HTTP_PASSWORD: ${{ steps.keyvault-yaml-secret.outputs.HTTP-PASSWORD }}
          MAILSAC_API_KEY: ${{ steps.keyvault-yaml-secret.outputs.MAILSAC-API-KEY }}

  production:
    name: Production Deployment
    runs-on: ubuntu-latest
    needs: [ integration, development ]
    concurrency: Production
    environment:
       name: Production
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - uses: Azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: DfE-Digital/keyvault-yaml-secret@v1
        id:  keyvault-yaml-secret
        with:
          keyvault: ${{ secrets.KEY_VAULT}}
          secret: INFRA-KEYS
          key: SLACK-WEBHOOK, SLACK-RELEASE-NOTE-WEBHOOK

      - name: Get Release Id from Tag
        id: tag_id
        uses: DFE-Digital/github-actions/DraftReleaseByTag@master
        with:
          TAG: ${{needs.development.outputs.release_tag}}
          TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish Release
        if: steps.tag_id.outputs.release_id
        uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{steps.tag_id.outputs.release_id}}

      - name: Deploy to Production
        uses: ./.github/workflows/actions/deploy
        id: deploy
        with:
          environment: Production
          sha:  ${{ github.sha }}
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          KEY_VAULT:         ${{ secrets.KEY_VAULT }}
          ARM_ACCESS_KEY:    ${{ secrets.ARM_ACCESS_KEY }}

      - name: Slack Release Notification
        if: steps.tag_id.outputs.release_id
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_COLOR: ${{env.SLACK_SUCCESS}}
          SLACK_TITLE: "Release Published: ${{steps.tag_id.outputs.release_name}}"
          SLACK_MESSAGE: ${{ fromJson( steps.tag_id.outputs.release_body) }}
          SLACK_WEBHOOK: ${{ steps.keyvault-yaml-secret.outputs.SLACK-RELEASE-NOTE-WEBHOOK }}
          MSG_MINIMAL: true

      - name: Slack Notification
        if: failure()
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_COLOR: ${{env.SLACK_FAILURE}}
          SLACK_TITLE: Production Release ${{github.event.title}}
          SLACK_MESSAGE: Failure deploying Production release
          SLACK_WEBHOOK: ${{ steps.keyvault-yaml-secret.outputs.SLACK-WEBHOOK }}
