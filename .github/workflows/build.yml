name: Build and Deploy
on:
  pull_request:
    types: [assigned, opened, synchronize, reopened]
  push:
    branches: [ master ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - uses: Azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: Azure/get-keyvault-secrets@v1
        id:   azSecret
        with:
           keyvault: ${{ secrets.KEY_VAULT}}
           secrets: 'SONAR-TOKEN, SLACK-WEBHOOK, ACTIONS-API-ACCESS-TOKEN'

      - name: Lint Dockerfile
        uses: brpaz/hadolint-action@master
        with:
             dockerfile: "Dockerfile"

      - name: Setup sonarqube
        uses: warchant/setup-sonar-scanner@v3 

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Get Short SHA
        id: sha
        run: |
             echo ::set-output name=short::$(echo $GITHUB_SHA | cut -c -7)

      - name: Set DOCKER_IMAGE environment variable
        id:   docker
        run: |-
          echo ::set-output name=DOCKER_IMAGE::${{ env.DOCKER_REPOSITORY }}:${{ steps.sha.outputs.short }}

      - name: Cache Docker layers
        uses: actions/cache@v2.1.5
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
             ${{ runner.os }}-buildx-

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ steps.azSecret.outputs.ACTIONS-API-ACCESS-TOKEN }}

      - name: Build and push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          tags: |
                 ${{ steps.docker.outputs.DOCKER_IMAGE }}
          push: true
          build-args: |
                      SHA=${{ steps.sha.outputs.short }}

      - name: Run Specs
        run: |-
          docker run -t --rm -v ${PWD}/out:/app/out -v ${PWD}/coverage:/app/coverage -e RAILS_ENV=test ${{steps.docker.outputs.DOCKER_IMAGE}} \
            rspec --format RspecSonarqubeFormatter --out /app/out/test-report.xml --format documentation

      - name: Fixup report file paths
        run: sudo sed -i "s?\"/app/?\"${PWD}/?" coverage/coverage.json

      - name:  Keep Code Coverage Report
        if:  always()
        uses: actions/upload-artifact@v2
        with:
          name: Code_Coverage
          path: ${{ github.workspace }}/coverage/*

      - name:  Keep Unit Tests Results
        if:  always()
        uses: actions/upload-artifact@v2
        with:
          name: unit_tests
          path: ${{ github.workspace }}/out/*

#     - name: Run Javascript Tests
#       run: |-
#         docker run -t --rm -e RAILS_ENV=test -e NODE_ENV=test -e CI=true \
#           ${{steps.docker.outputs.DOCKER_IMAGE}} "yarn && yarn spec"

      - name: Lint Ruby
        run: |-
          docker run -t --rm -v ${PWD}/out:/app/out -e RAILS_ENV=test ${{steps.docker.outputs.DOCKER_IMAGE}} \
            rubocop --format json --out=/app/out/rubocop-result.json

      - name: Keep Rubocop output
        if:  always()
        uses: actions/upload-artifact@v2
        with:
          name: Rubocop_results
          path: ${{ github.workspace }}/out/rubocop-result.json

      - name: Run Brakeman static security scanner
        run: |-
          docker run -t --rm -e RAILS_ENV=test ${{steps.docker.outputs.DOCKER_IMAGE}}  brakeman --no-pager

      - name: Run sonarqube
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: sonar-scanner
           -Dsonar.login=${{ steps.azSecret.outputs.SONAR-TOKEN }}
           -Dsonar.organization=dfe-digital
           -Dsonar.host.url=https://sonarcloud.io/
           -Dsonar.projectKey=DFE-Digital_get-into-teaching-app
           -Dsonar.testExecutionReportPaths=out/test-report.xml
           -Dsonar.ruby.coverage.reportPaths=${PWD}/coverage/coverage.json
           -Dsonar.ruby.rubocop.reportPaths=${PWD}/out/rubocop-result.json

      - name: Check Content pages
        run: |-
          docker run -t --rm -e RAILS_ENV=test \
            ${{ steps.docker.outputs.DOCKER_IMAGE }} \
            rspec --format documentation spec/features/content_pages_spec.rb

#     - name: Trigger CVE Testing
#       uses: benc-uk/workflow-dispatch@v1.1
#       with:
#         workflow: cve
#         token: ${{ steps.azSecret.outputs.ACTIONS-API-ACCESS-TOKEN }}
#         inputs: '{"image": "${{ steps.docker.outputs.DOCKER_IMAGE }}"}'

      - name: Slack Notification
        if: failure() && github.ref == 'refs/heads/master'
        uses: rtCamp/action-slack-notify@master
        env:
           SLACK_COLOR: ${{env.SLACK_ERROR}}
           SLACK_MESSAGE: 'There has been a failure building the MASTER branch of the application'
           SLACK_TITLE: 'Failure Building Application'
           SLACK_WEBHOOK: ${{ steps.azSecret.outputs.SLACK-WEBHOOK }}

  review:
    name: Review Deployment Process
    environment: Development
    needs: [ build ]
    if: github.ref != 'refs/heads/master' && github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - uses: Azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: Azure/get-keyvault-secrets@v1
        id:   azSecret
        with:
           keyvault: ${{ secrets.KEY_VAULT}}
           secrets: 'ACTIONS-API-ACCESS-TOKEN, SLACK-WEBHOOK'

      - name: Trigger Review Deployment
        uses: benc-uk/workflow-dispatch@v1.1
        with:
          workflow: Deploy to PaaS
          token: ${{ steps.azSecret.outputs.ACTIONS-API-ACCESS-TOKEN }}
          inputs: '{"environment": "Review", "sha": "${{ github.sha }}" , "pr": "${{github.event.number}}"  }'
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Wait for Deployment to Review
        uses: fountainhead/action-wait-for-check@v1.0.0
        id: wait-for-review
        with:
          token: ${{ steps.azSecret.outputs.ACTIONS-API-ACCESS-TOKEN }}
          checkName: Deploy Review
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Check if Review Deployment has returned with a failure
        if: steps.wait-for-review.outputs.conclusion == 'failure'
        run: exit 1

      - name: Post PR comment
        run: |
          curl --silent  \
               --header "Accept: application/vnd.github.v3+json" \
               --header "Authorization: Bearer ${{ github.token }}" \
               --request POST \
               --data '{"body": "Review app deployed to https://${{env.REVIEW_APPLICATION}}-${{github.event.number}}.${{env.DOMAIN}} "}'  \
               https://api.github.com/repos/${{ github.repository }}/issues/${{github.event.number }}/comments

      - name: Add Review Label
        if: contains(github.event.pull_request.user.login, 'dependabot') == false
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ steps.azSecret.outputs.ACTIONS-API-ACCESS-TOKEN }}
          labels: Review
