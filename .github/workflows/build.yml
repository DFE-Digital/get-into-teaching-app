name: Build and Deploy
on:
  pull_request:
    types: [assigned, opened, synchronize, reopened]
  push:
    branches: [ master ]

jobs:
  build:
    name: Build and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - uses: Azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: Azure/get-keyvault-secrets@v1
        id:   azSecret
        with:
           keyvault: ${{ secrets.KEY_VAULT}}
           secrets: 'SONAR-TOKEN, SLACK-WEBHOOK, ACTIONS-API-ACCESS-TOKEN'

      - name: Lint Dockerfile
        uses: brpaz/hadolint-action@master
        with:
             dockerfile: "Dockerfile"

      - name: Setup sonarqube
        uses: warchant/setup-sonar-scanner@v3 

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Get Short SHA
        id: sha
        run: echo ::set-output name=short::$(echo $GITHUB_SHA | cut -c -7)

      - name: Cache Docker layers
        uses: actions/cache@v2.1.5
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
             ${{ runner.os }}-buildx-

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ steps.azSecret.outputs.ACTIONS-API-ACCESS-TOKEN }}

      - name: Build and push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          tags: |
                 ${{env.DOCKER_REPOSITORY}}:sha-${{ steps.sha.outputs.short }}
          push: true
          build-args: |
                      SHA=${{ steps.sha.outputs.short }}

      - name: Set DOCKER_IMAGE environment variable
        id:   docker
        run: |-
          echo ::set-output name=DOCKER_IMAGE::${{ env.DOCKER_REPOSITORY }}:sha-$(echo "${{ github.sha }}" | cut -c -7)

      - name: Run Specs
        run: |-
          docker run -t --rm -v ${PWD}/out:/app/out -v ${PWD}/coverage:/app/coverage -e RAILS_ENV=test ${{steps.docker.outputs.DOCKER_IMAGE}} \
            rspec --format RspecSonarqubeFormatter --out /app/out/test-report.xml --format documentation

      - name: Fixup report file paths
        run: sudo sed -i "s?\"/app/?\"${PWD}/?" coverage/coverage.json

      - name:  Keep Code Coverage Report
        if:  always()
        uses: actions/upload-artifact@v2
        with:
          name: Code_Coverage
          path: ${{ github.workspace }}/coverage/*

      - name:  Keep Unit Tests Results
        if:  always()
        uses: actions/upload-artifact@v2
        with:
          name: unit_tests
          path: ${{ github.workspace }}/out/*

#     - name: Run Javascript Tests
#       run: |-
#         docker run -t --rm -e RAILS_ENV=test -e NODE_ENV=test -e CI=true \
#           ${{steps.docker.outputs.DOCKER_IMAGE}} "yarn && yarn spec"

      - name: Lint Ruby
        run: |-
          docker run -t --rm -v ${PWD}/out:/app/out -e RAILS_ENV=test ${{steps.docker.outputs.DOCKER_IMAGE}} \
            rubocop --format json --out=/app/out/rubocop-result.json

      - name: Keep Rubocop output
        if:  always()
        uses: actions/upload-artifact@v2
        with:
          name: Rubocop_results
          path: ${{ github.workspace }}/out/rubocop-result.json

      - name: Run Brakeman static security scanner
        run: |-
          docker run -t --rm -e RAILS_ENV=test ${{steps.docker.outputs.DOCKER_IMAGE}}  brakeman --no-pager

      - name: Run sonarqube
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: sonar-scanner
           -Dsonar.login=${{ steps.azSecret.outputs.SONAR-TOKEN }}
           -Dsonar.organization=dfe-digital
           -Dsonar.host.url=https://sonarcloud.io/
           -Dsonar.projectKey=DFE-Digital_get-into-teaching-app
           -Dsonar.testExecutionReportPaths=out/test-report.xml
           -Dsonar.ruby.coverage.reportPaths=${PWD}/coverage/coverage.json
           -Dsonar.ruby.rubocop.reportPaths=${PWD}/out/rubocop-result.json

      - name: Slack Notification
        if: failure() && github.ref == 'refs/heads/master'
        uses: rtCamp/action-slack-notify@master
        env:
           SLACK_COLOR: ${{env.SLACK_ERROR}}
           SLACK_MESSAGE: 'There has been a failure building the MASTER branch of the application and deploying it to Development.'
           SLACK_TITLE: 'Failure Building Application'
           SLACK_WEBHOOK: ${{ steps.azSecret.outputs.SLACK-WEBHOOK }}

