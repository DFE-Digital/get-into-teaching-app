name: Deploy to AKS

inputs:
      environment:
        description: The environment to deploy to Development/Test/Production/Review/Speed/UR etc
        required: true
      sha:
        description: Commit sha to be deployed
        required: true
      pr:
        description: Pull Request Reference
        required: false
      AZURE_CREDENTIALS:
        required: true
      KEY_VAULT:
        required: true
      ARM_ACCESS_KEY:
        required: true

runs:
    using: composite
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master
        with:
          var_file: .github/common_environment_aks.yml

      - uses: azure/login@v1
        with:
           creds: ${{ inputs.AZURE_CREDENTIALS }}

      - name: Get Short SHA
        id: sha
        shell: bash
        run: echo "short=$(echo "${{ inputs.sha }}" | cut -c -7)" >> $GITHUB_OUTPUT

      - name: Setup Environment Variables
        id: variables
        shell: bash
        run: |
             tf_vars_file=terraform/aks/config/${{ inputs.environment }}.tfvars.json
             terraform_version=$(awk '/{/{f=/^terraform/;next}f' terraform/aks/terraform.tf | grep -o [0-9\.]*)
             cluster=$(jq -r '.cluster' ${tf_vars_file})
             appenv=$(jq -r '.environment' ${tf_vars_file})
             cluster_domain=".${cluster}"
             echo "TERRAFORM_VERSION=$terraform_version" >> $GITHUB_ENV

             if [ "${{inputs.environment }}" == "review_aks" ]
             then
                 pr_name="${{env.REVIEW_APPLICATION}}-${{inputs.pr}}"
                 echo "pr_name=${pr_name}" >> $GITHUB_OUTPUT
                 echo "healthcheck=${pr_name}${cluster_domain}" >> $GITHUB_OUTPUT
             elif [ "${{inputs.environment }}" == "production_aks" ]
                echo "healthcheck=${{env.AKS_APPLICATION_NAME}}-${appenv}" >> $GITHUB_OUTPUT
             else
                 echo "healthcheck=${{env.AKS_APPLICATION_NAME}}-${appenv}${cluster_domain}" >> $GITHUB_OUTPUT
             fi

      - name: Fetch secrets from key vault
        uses: azure/CLI@v1
        id: fetch-secrets
        with:
          inlineScript: |
            HTTP_USERNAME=$(az keyvault secret show --name "HTTP-USERNAME" --vault-name "${{ inputs.KEY_VAULT}}" --query "value" -o tsv)
            echo "::add-mask::$HTTP_USERNAME"
            echo "HTTP_USERNAME=$HTTP_USERNAME" >> $GITHUB_OUTPUT
            HTTP_PASSWORD=$(az keyvault secret show --name "HTTP-PASSWORD" --vault-name "${{ inputs.KEY_VAULT}}" --query "value" -o tsv)
            echo "::add-mask::$HTTP_PASSWORD"
            echo "HTTP_PASSWORD=$HTTP_PASSWORD" >> $GITHUB_OUTPUT

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform init, plan & apply
        shell: bash
        run: make ${{ inputs.environment }} ci terraform-apply-aks
        env:
          ARM_ACCESS_KEY: ${{ inputs.ARM_ACCESS_KEY }}
          DOCKER_IMAGE_TAG: sha-${{ steps.sha.outputs.short}}
          PR_NUMBER: ${{ inputs.pr }}
          CONFIRM_PRODUCTION: true

      - name: Smoke tests
        shell: bash
        if: ${{ inputs.environment != 'Speed' && inputs.environment != 'pagespeed' }}
        run: |
             tests/confidence/healthcheck_aks.sh  "${{steps.variables.outputs.healthcheck}}"  "sha-${{ steps.sha.outputs.short }}"
        env:
          HTTPAUTH_PASSWORD: ${{ steps.fetch-secrets.outputs.HTTP_PASSWORD }}
          HTTPAUTH_USERNAME: ${{ steps.fetch-secrets.outputs.HTTP_USERNAME }}
