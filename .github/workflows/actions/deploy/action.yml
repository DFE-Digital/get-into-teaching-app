name: Deploy to PaaS

inputs:
      environment:
        description: The environment to deploy to Development/Test/Production/Review/Speed/UR etc
        required: true
      sha:
        description: Commit sha to be deployed
        required: true
      pr:
        description: Pull Request Reference
        required: false
      AZURE_CREDENTIALS:
        required: true
      KEY_VAULT:
        required: true
      ARM_ACCESS_KEY:
        required: true

runs:
    using: composite
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - uses: azure/login@v1
        with:
           creds: ${{ inputs.AZURE_CREDENTIALS }}

      - name: Validate Key Vault Secrets
        uses: DFE-Digital/github-actions/validate-key-vault-secrets@master
        with:
          KEY_VAULT: ${{ inputs.KEY_VAULT }}
          SECRETS: |
              CONTENT-KEYS
              INFRA-KEYS

      - name: Get Short SHA
        id: sha
        shell: bash
        run: echo "short=$(echo "${{ inputs.sha }}" | cut -c -7)" >> $GITHUB_OUTPUT

      - name: Setup Environment Variables
        id: variables
        shell: bash
        run: |
             echo RUN_TEST="true" >> $GITHUB_OUTPUT
             if [ "${{inputs.environment }}" == "Review" ]
             then
                 echo "control=review" >> $GITHUB_OUTPUT
                 pr_name="${{env.REVIEW_APPLICATION}}-${{inputs.pr}}"
                 echo "pr_name=${pr_name}" >> $GITHUB_OUTPUT
                 echo "healthcheck=${pr_name}" >> $GITHUB_OUTPUT
                 echo "key=${pr_name}" >> $GITHUB_OUTPUT
                 echo "TF_VAR_paas_app_application_name=${pr_name}" >> $GITHUB_ENV
                 echo "TF_VAR_paas_app_route_name=${pr_name}" >> $GITHUB_ENV
             fi

             if [ "${{inputs.environment }}" == "Development" ]
             then
                 echo "control=dev" >> $GITHUB_OUTPUT
                 echo "healthcheck=${{env.PAAS_APPLICATION_NAME}}-dev" >> $GITHUB_OUTPUT
                 echo "key=app.dev.terraform" >> $GITHUB_OUTPUT
             fi

             if [ "${{inputs.environment }}" == "Test" ]
             then
                 echo "control=test" >> $GITHUB_OUTPUT
                 echo "healthcheck=${{env.PAAS_APPLICATION_NAME}}-test" >> $GITHUB_OUTPUT
                 echo "key=app.test.terraform" >> $GITHUB_OUTPUT
             fi

             if [ "${{inputs.environment }}" == "Speed" ]
             then
                 echo RUN_TEST="false" >> $GITHUB_OUTPUT
                 echo "control=pagespeed" >> $GITHUB_OUTPUT
                 echo "healthcheck=${{env.PAAS_APPLICATION_NAME}}-pagespeed" >> $GITHUB_OUTPUT
                 echo "key=app.pagespeed.terraform" >> $GITHUB_OUTPUT
             fi

             if [ "${{inputs.environment }}" == "UR" ]
             then
                 echo RUN_TEST="true" >> $GITHUB_OUTPUT
                 echo "control=ur" >> $GITHUB_OUTPUT
                 echo "healthcheck=${{env.PAAS_APPLICATION_NAME}}-UR" >> $GITHUB_OUTPUT
                 echo "key=app.ur.terraform" >> $GITHUB_OUTPUT
             fi

             if [ "${{inputs.environment }}" == "Production" ]
             then
                 echo "control=production" >> $GITHUB_OUTPUT
                 echo "healthcheck=${{env.PAAS_APPLICATION_NAME}}-prod" >> $GITHUB_OUTPUT
                 echo "key=app.production.terraform" >> $GITHUB_OUTPUT
             fi

             echo "docker_image=${{env.DOCKER_REPOSITORY}}:sha-${{ steps.sha.outputs.short}}" >> $GITHUB_OUTPUT

      - uses: DfE-Digital/keyvault-yaml-secret@v1
        id:  keyvault-yaml-secret
        with:
          keyvault: ${{ inputs.KEY_VAULT}}
          secret: INFRA-KEYS
          key: HTTP-USERNAME, HTTP-PASSWORD, LOGIT-API

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.8

      - name: Terraform ( ${{inputs.environment}} )
        shell: bash
        run: |
            cd terraform/paas && pwd
            terraform init -backend-config=${{steps.variables.outputs.control}}.bk.vars -backend-config="key=${{steps.variables.outputs.key}}.tfstate"
            terraform apply -var-file=${{steps.variables.outputs.control}}.env.tfvars -auto-approve
        env:
          ARM_ACCESS_KEY:               ${{ inputs.ARM_ACCESS_KEY  }}
          TF_VAR_paas_app_docker_image: ${{ steps.variables.outputs.docker_image}}
          TF_VAR_AZURE_CREDENTIALS:     ${{ inputs.AZURE_CREDENTIALS }}

      - name: Smoke tests
        shell: bash
        run: |
            if [ "${{steps.variables.outputs.RUN_TEST}}" == "true" ]
            then
                   tests/confidence/healthcheck.sh  "${{steps.variables.outputs.healthcheck}}"  "sha-${{ steps.sha.outputs.short }}"
            fi
        env:
          HTTPAUTH_PASSWORD: ${{ steps.keyvault-yaml-secret.outputs.HTTP-PASSWORD }}
          HTTPAUTH_USERNAME: ${{ steps.keyvault-yaml-secret.outputs.HTTP-USERNAME }}

      - name: Log Deployment
        if: always()
        uses: DFE-Digital/github-actions/SendToLogit@master
        with:
           LOGIT-API-KEY: ${{ steps.keyvault-yaml-secret.outputs.LOGIT-API }}
           logtype: "github"
           JSON: |
                '{"Application" : "${{env.PAAS_APPLICATION_NAME}}",
                  "Status"      : "${{ job.status }}",
                  "Action"      : "Deploy",
                  "Environment" : "${{inputs.environment}}",
                  "Version"     : "${{ inputs.sha }}" }'
