name: owasp

inputs:
      environment:
        description: The environment to deploy to Development/Test/Production/Review/Speed/UR etc
        required: true
      AZURE_CREDENTIALS:
        required: true
      KEY_VAULT:
        required: true
      ARM_ACCESS_KEY:
        required: true
      GITHUB_TOKEN:
        required: true

runs:
    using: composite

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: Azure/login@v1
        with:
            creds: ${{ inputs.AZURE_CREDENTIALS }}

      - name: Fetch secrets from key vault
        uses: azure/CLI@v1
        id: keyvault-yaml-secret
        with:
          inlineScript: |
            SLACK_WEBHOOK=$(az keyvault secret show --name "SLACK-WEBHOOK" --vault-name "${{ inputs.KEY_VAULT}}" --query "value" -o tsv)
            echo "::add-mask::$SLACK_WEBHOOK"
            echo "SLACK_WEBHOOK=$SLACK_WEBHOOK" >> $GITHUB_OUTPUT
            HTTP_PASSWORD=$(az keyvault secret show --name "HTTP-PASSWORD" --vault-name "${{ inputs.KEY_VAULT}}" --query "value" -o tsv)
            echo "::add-mask::$HTTP_PASSWORD"
            echo "HTTP_PASSWORD=$HTTP_PASSWORD" >> $GITHUB_OUTPUT
            HTTP_USERNAME=$(az keyvault secret show --name "HTTP-USERNAME" --vault-name "${{ inputs.KEY_VAULT}}" --query "value" -o tsv)
            echo "::add-mask::$HTTP_USERNAME"
            echo "HTTP_USERNAME=$HTTP_USERNAME" >> $GITHUB_OUTPUT

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master
        with:
          var_file: .github/common_environment_aks.yml

      - name: Setup Application Name
        id:   app_name
        shell: bash
        run: |
             if [[ "${{ inputs.environment }}" == "production_aks" ]] ; then
                 rval="${{env.AKS_APPLICATION_NAME}}-production.${{env.DOMAIN}}"
             elif [[ "${{ inputs.environment }}" == "test_aks" ]] ; then
                 rval="${{env.AKS_APPLICATION_NAME}}-test.test.${{env.DOMAIN}}"
             elif [[ "${{ inputs.environment }}" == "development_aks" ]] ; then
                 rval="${{env.AKS_APPLICATION_NAME}}-development.test.${{env.DOMAIN}}"
             fi
             echo "SCAN=${rval}" >> $GITHUB_OUTPUT

      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.4.0
        with:
          token: ${{ inputs.GITHUB_TOKEN }}
          docker_name: 'owasp/zap2docker-stable'
          target: 'https://${{ steps.keyvault-yaml-secret.outputs.HTTP-USERNAME }}:${{ steps.keyvault-yaml-secret.outputs.HTTP-PASSWORD }}@${{steps.app_name.outputs.SCAN}}/'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Slack Notification
        if: failure()
        uses: rtCamp/action-slack-notify@master
        env:
           SLACK_COLOR: ${{env.SLACK_FAILURE}}
           SLACK_MESSAGE: 'Pipeline Failure carrying out AKS OWASP Testing on https://${{steps.app_name.outputs.SCAN}}/'
           SLACK_TITLE: 'Failure: OWSAP Testing has failed on ${{ inputs.environment }}'
           SLACK_WEBHOOK: ${{ steps.keyvault-yaml-secret.outputs.SLACK-WEBHOOK }}
